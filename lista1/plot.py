"""
File: plot.py

Description:
  Plot the error from the Fortran program for each x value.

Dependencies:
- Numpy
- Matplotlib
- OS

Since:
  - 03/2025

Authors:
  - Pedro C. Delbem <pedrodelbem@usp.br>
"""

import matplotlib.pyplot as plt  # type: ignore
import numpy as np  # type: ignore
import os
import re

def read_table(file_path):
    """
    Reads the table generated by the Fortran program and stores the error data in a dictionary.

    Returns:
        dict: Dictionary in the form:
              {x1: {'N': [...], 'error_series_e_minus_x': [...], 'error_series_e_x_inverse': [...]}, ...}
    """
    data = {}
    current_x = None

    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()

            if line.startswith("x:"):
                current_x = round(float(line.split(":")[1]), 6)
                data[current_x] = {
                    'N': [],
                    'error_series_e_minus_x': [],
                    'error_series_e_x_inverse': []
                }

            elif line.startswith("N:") and current_x is not None:
                parts = re.split(r"\s+", line[2:].strip())
                if len(parts) >= 3:
                    try:
                        N = int(parts[0])
                        error1 = float(parts[1])
                        error2 = float(parts[2])
                    except ValueError:
                        continue
                    data[current_x]['N'].append(N)
                    data[current_x]['error_series_e_minus_x'].append(error1)
                    data[current_x]['error_series_e_x_inverse'].append(error2)

    return data

def plot_data(data, output_folder="images"):
    """
    Plot the error data for each x value and save the plots.

    Parameters:
        data (dict): Dictionary with x values as keys and dictionaries of errors as values.
        output_folder (str): Folder to save the plots.
    """
    os.makedirs(output_folder, exist_ok=True)

    for x, values in data.items():
        N = np.array(values['N'])
        error_minus_x = np.array(values['error_series_e_minus_x'])
        error_inverse_x = np.array(values['error_series_e_x_inverse'])

        # Filtra valores de erro iguais a zero para evitar log(0)
        valid_indices = (error_minus_x > 0) & (error_inverse_x > 0)

        if not np.any(valid_indices):
            print(f"Aviso: Nenhum erro positivo para x = {x}. Pulando gráfico.")
            continue

        N = N[valid_indices]
        error_minus_x = error_minus_x[valid_indices]
        error_inverse_x = error_inverse_x[valid_indices]

        plt.figure(figsize=(8, 5))
        plt.plot(N, error_minus_x, 'o-', label=r'Erro $e^{-x}$')
        plt.plot(N, error_inverse_x, 's-', label=r'Erro $1/e^{x}$')

        plt.xscale('log')
        plt.yscale('log')
        plt.xlabel('N')
        plt.ylabel('Erro Absoluto')
        plt.title(f'Erro das Séries para x = {x}')
        plt.legend()
        plt.grid(True)

        file_name = os.path.join(output_folder, f"erro_x_{str(x).replace('.', '_')}.png")
        plt.savefig(file_name)
        plt.close()
        print(f"Gráfico salvo em: {file_name}")

def main():
    data = read_table('exponential_taylor_series.txt')
    plot_data(data)

if __name__ == '__main__':
    main()
