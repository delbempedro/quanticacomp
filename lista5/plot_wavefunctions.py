"""
File: plot_wavefuntions.py

Description:
  Plot the data from the Fortran program which compute wavefunctions.

Dependencies:
- Numpy
- Matplotlib

Since:
  - 06/2025

Authors:
  - Pedro C. Delbem <pedrodelbem@usp.br>
"""
# Import necessary libraries
# numpy is used for numerical operations, especially array manipulation.
# matplotlib.pyplot is used for creating plots and visualizations.
import numpy as np
import matplotlib.pyplot as plt

def plot_wavefunction():
    """
    Reads the calculated wavefunction data from a text file and plots it
    against the exact theoretical solution for comparison.
    """
    # --- 1. Plot Configuration ---
    # Set a visually appealing style for the plot.
    plt.style.use('seaborn-v0_8-whitegrid')
    # Create a figure and a set of subplots. 'fig' is the whole window, 'ax' is the plot itself.
    # 'figsize' controls the dimensions of the plot.
    fig, ax = plt.subplots(figsize=(10, 6))

    # --- 2. Load Numerical Data from Fortran Output ---
    # Define the name of the file generated by the Fortran program.
    fortran_output_file = "L5-5255417-ex-2-results.txt"
    
    # Use a try-except block to handle potential errors, like the file not existing.
    try:
        # Load the data from the text file. numpy's loadtxt is efficient for this.
        # It assumes the data is whitespace-separated.
        data = np.loadtxt(fortran_output_file)
        # The first column (index 0) contains the x-coordinates.
        x_numerical = data[:, 0]
        # The second column (index 1) contains the calculated psi values.
        psi_numerical = data[:, 1]
    except FileNotFoundError:
        # If the file doesn't exist, print a helpful error message and exit the function.
        print(f"Error: The file '{fortran_output_file}' was not found.")
        print("Please make sure you have run the corrected Fortran program first to generate this file.")
        return
    except Exception as e:
        # Catch any other potential errors during file reading.
        print(f"An error occurred while reading the file: {e}")
        return

    # --- 3. Calculate the Theoretical Solution ---
    # For the ground state (n=1) of an infinite potential well from 0 to L,
    # the normalized wavefunction is: psi(x) = sqrt(2/L) * sin(n*pi*x/L).
    # We assume simplified units where L=1 and n=1 for the ground state.
    L = 1.0
    # Generate a smooth set of x-coordinates for the theoretical curve.
    x_theoretical = np.linspace(0, L, 400)
    # Calculate the corresponding psi values for the theoretical curve.
    psi_theoretical = np.sqrt(2.0/L) * np.sin(np.pi * x_theoretical / L)

    # --- 4. Plotting ---
    # Plot the theoretical solution as a continuous red line.
    ax.plot(x_theoretical, psi_theoretical, 'r-', label='Theoretical Solution ($\sqrt{2}\sin(\pi x)$)', linewidth=2)
    
    # Plot the numerical solution from the Fortran code as discrete blue circles.
    ax.plot(x_numerical, psi_numerical, 'bo', label='Numerical Solution (Fortran)', markersize=6)

    # --- 5. Final Graph Adjustments ---
    ax.set_title('Ground State Wavefunction of the Infinite Potential Well', fontsize=16)
    ax.set_xlabel('Position (x)', fontsize=12)
    ax.set_ylabel('Wavefunction Amplitude ($\psi_1(x)$)', fontsize=12)
    # Add a legend to identify the plots.
    ax.legend(fontsize=11)
    # Draw a horizontal line at y=0 for reference.
    ax.axhline(0, color='black', linewidth=0.5)
    # Set the x-axis limits to match the potential well boundaries.
    ax.set_xlim(0, L)

    # --- 6. Save and Show the Plot ---
    # Define the output filename for the saved image.
    output_filename = "wavefunction_plot.png"
    # Save the figure to a file with high resolution (dpi=300).
    plt.savefig(output_filename, dpi=300)
    print(f"Plot successfully saved as '{output_filename}'")
    
    # Display the plot on the screen.
    plt.show()

# This is a standard Python construct.
# The code inside this 'if' block will only run when the script is executed directly,
# not when it's imported as a module into another script.
if __name__ == '__main__':
    plot_wavefunction()
